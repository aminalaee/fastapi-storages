{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#fastapi-storages","title":"FastAPI Storages","text":"<p>A collection of backend storages and ORM extensions to simplify file management in FastAPI and Starlette projects.</p> <p>Similar to <code>django-storages</code> project, but aiming to work with a wider range of database ORMs and backends.</p> <p>Documentation: https://aminalaee.dev/fastapi-storages</p> <p>Source Code: https://github.com/aminalaee/fastapi-storages</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fastapi-storages\npip install 'fastapi-storages[full]'\n</code></pre>"},{"location":"#supported-integrations","title":"Supported integrations","text":"<ul> <li><code>SQLAlchemy</code></li> <li><code>SQLModel</code></li> <li><code>SQLAdmin</code></li> </ul>"},{"location":"#supported-storage-backends","title":"Supported storage backends","text":"<ul> <li><code>FileSystemStorage</code></li> <li><code>S3Storage</code></li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>from fastapi import FastAPI, UploadFile\nfrom sqlalchemy import Column, Integer, create_engine\nfrom sqlalchemy.orm import Session, declarative_base\nfrom fastapi_storages import FileSystemStorage\nfrom fastapi_storages.integrations.sqlalchemy import FileType\n\napp = FastAPI()\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\")\n\n\nclass Example(Base):\n    __tablename__ = \"example\"\n\n    id = Column(Integer, primary_key=True)\n    file = Column(FileType(storage=FileSystemStorage(path=\"/tmp\")))\n\n\n# Create database and table\nBase.metadata.create_all(engine)\n\n\n@app.post(\"/upload/\")\ndef create_upload_file(file: UploadFile):\n    example = Example(file=file)\n    with Session(engine) as session:\n        session.add(example)\n        session.commit()\n        return {\"filename\": example.file.name}\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#working-with-storages","title":"Working with storages","text":"<p>Often in projects, you want to get input file in the API and store it somewhere. The <code>fastapi-storages</code> simplifies the process to store and retrieve the files in a re-usable manner.</p> <p>There are two  storages available:</p> <ul> <li><code>FileSystemStorage</code>: To store files on the local file system.</li> <li><code>S3Storage</code>: To store file objects in Amazon <code>S3</code> or any s3-compatible object storage.</li> </ul>"},{"location":"usage/#filesystemstorage","title":"FileSystemStorage","text":"<p>A very minimal example to use <code>FileSystemStorage</code>:</p> <pre><code>from fastapi import FastAPI, UploadFile\nfrom fastapi_storages import FileSystemStorage\n\n\napp = FastAPI()\nstorage = FileSystemStorage(path=\"/tmp\")\n\n\n@app.post(\"/upload/\")\ndef create_upload_file(file: UploadFile):\n    storage.write(file)\n</code></pre> <p>This will configure a <code>FileSystemStorage</code> to store files in the <code>/tmp</code> directory and the request file is automatically saved into the destination.</p>"},{"location":"usage/#s3storage","title":"S3Storage","text":"<p>Now let's see a minimal example of using <code>S3Storage</code> in action:</p> <pre><code>from fastapi import FastAPI, UploadFile\nfrom fastapi_storages import S3Storage\n\n\nclass PublicAssetS3Storage(S3Storage):\n    AWS_ACCESS_KEY_ID = \"access\"\n    AWS_SECRET_ACCESS_KEY = \"secret\"\n    AWS_S3_BUCKET_NAME = \"test\"\n    AWS_S3_ENDPOINT_URL = \"s3.amazonaws.com\"\n    AWS_DEFAULT_ACL = \"public-read\"\n    AWS_S3_USE_SSL = True\n\n\napp = FastAPI()\nstorage = PublicAssetS3Storage()\n\n\n@app.post(\"/upload/\")\ndef create_upload_file(file: UploadFile):\n    storage.write(file)\n</code></pre> <p>As you can see the code is not changed and <code>storage.write(file)</code> is called the same way it was used in <code>FileSystemStorage</code>.</p> <p>Warning</p> <p>You should never hard-code credentials like <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> in the code. Instead, you can read values from environment variables or as a handy way, <code>fastapi-storages</code> will use the environment variables automatically, if they are defined.</p>"},{"location":"usage/#working-with-orm-extensions","title":"Working with ORM extensions","text":"<p>The example you saw was useful, but <code>fastapi-storages</code> has ORM integrations which makes storing and serving the files easier.</p> <p>Support ORM include:</p> <ul> <li><code>SQLAlchemy</code></li> <li><code>SQLAdmin</code></li> </ul>"},{"location":"usage/#sqlalchemy","title":"SQLAlchemy","text":"<p>You can use custom <code>SQLAlchemy</code> types from <code>fastapi-storages</code> for this.</p> <p>Supported types include:</p> <ul> <li><code>FileType</code></li> <li><code>ImageType</code></li> </ul> <p>Let's see an example:</p> <pre><code>from fastapi import FastAPI, UploadFile\nfrom sqlalchemy import Column, Integer, create_engine\nfrom sqlalchemy.orm import Session, declarative_base\nfrom fastapi_storages import FileSystemStorage\nfrom fastapi_storages.integrations.sqlalchemy import FileType\n\napp = FastAPI()\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\")\n\n\nclass Example(Base):\n    __tablename__ = \"example\"\n\n    id = Column(Integer, primary_key=True)\n    file = Column(FileType(storage=FileSystemStorage(path=\"/tmp\")))\n\n\n# Create database and table\nBase.metadata.create_all(engine)\n\n\n@app.post(\"/upload/\")\ndef create_upload_file(file: UploadFile):\n    example = Example(file=file)\n    with Session(engine) as session:\n        session.add(example)\n        session.commit()\n        return {\"filename\": example.file.name}\n</code></pre> <p>As you can see the API <code>create_upload_file</code> has changed compared to using the storage directly.</p> <p>You don't need the <code>storage.write(...)</code> call anymore. With the custom SQLAlchemy types, before the model is saved in database, the file is stored in the specified storage and then the record is saved.</p> <p>You can just replace the storage with <code>S3Storage</code> and everything works without the change. This will make your code cleaner and more readable.</p>"},{"location":"usage/#integration-with-alembic","title":"Integration with Alembic","text":"<p>By default, custom types are not registered in Alembic's migrations. To integrate these new types with Alembic, you can do either of these:</p>"},{"location":"usage/#create-new-type-on-top-of-these-types","title":"Create new \"type\" on top of these types","text":"<p>We create the following snippet in <code>custom_types.py</code></p> <pre><code>from fastapi_storages.integrations.sqlalchemy import FileType as _FileType\nfrom fastapi_storages import FileSystemStorage\n\nclass FileType(_FileType):\n    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n        super().__init__(storage=FileSystemStorage(path='/tmp'), *args, **kwargs)\n</code></pre> <p>And by using the new <code>FileType</code> Alembic can do the imports properly, it's a simple trick, but is very simple.</p>"},{"location":"usage/#add-files-path-to-scriptpymako","title":"Add files path to <code>script.py.mako</code>","text":"<p>Alembic allows you to modify <code>alembic/script.py.mako</code> and the migrations are generated with proper imports.</p> <pre><code>\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\n\"\"\"\nimport sqlalchemy as sa\nfrom alembic import op\nimport path_to_custom_types_py_file\n${imports if imports else \"\"}\n\n# THE REST OF SCRIPT\n</code></pre>"},{"location":"api_reference/storages/","title":"Storage types","text":"<p>             Bases: <code>str</code></p> <p>The file obect returned by the storage.</p> Source code in <code>fastapi_storages/base.py</code> <pre><code>class StorageFile(str):\n    \"\"\"\n    The file obect returned by the storage.\n    \"\"\"\n\n    def __new__(cls, name: str, storage: BaseStorage) -&gt; \"StorageFile\":\n        return str.__new__(cls, storage.get_path(name))\n\n    def __init__(self, *, name: str, storage: BaseStorage):\n        self._name = name\n        self._storage = storage\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"File name including extension.\"\"\"\n\n        return self._storage.get_name(self._name)\n\n    @property\n    def path(self) -&gt; str:\n        \"\"\"Complete file path.\"\"\"\n\n        return self._storage.get_path(self._name)\n\n    @property\n    def size(self) -&gt; int:\n        \"\"\"File size in bytes.\"\"\"\n\n        return self._storage.get_size(self._name)\n\n    def open(self) -&gt; BinaryIO:\n        \"\"\"\n        Open a file handle of the file.\n        \"\"\"\n\n        return self._storage.open(self._name)\n\n    def write(self, file: BinaryIO) -&gt; str:\n        \"\"\"\n        Write input file which is opened in binary mode to destination.\n        \"\"\"\n\n        if not self._storage.OVERWRITE_EXISTING_FILES:\n            self._name = self._storage.generate_new_filename(self._name)\n\n        return self._storage.write(file=file, name=self._name)\n\n    def __str__(self) -&gt; str:\n        return self.path\n</code></pre> <p>             Bases: <code>StorageFile</code></p> <p>Inherits features of <code>StorageFile</code> and adds image specific properties.</p> Source code in <code>fastapi_storages/base.py</code> <pre><code>class StorageImage(StorageFile):\n    \"\"\"\n    Inherits features of `StorageFile` and adds image specific properties.\n    \"\"\"\n\n    def __new__(\n        cls, name: str, storage: BaseStorage, height: int, width: int\n    ) -&gt; \"StorageImage\":\n        return str.__new__(cls, storage.get_path(name))\n\n    def __init__(\n        self, *, name: str, storage: BaseStorage, height: int, width: int\n    ) -&gt; None:\n        super().__init__(name=name, storage=storage)\n        self._width = width\n        self._height = height\n\n    @property\n    def height(self) -&gt; int:\n        \"\"\"\n        Image height in pixels.\n        \"\"\"\n\n        return self._height\n\n    @property\n    def width(self) -&gt; int:\n        \"\"\"\n        Image width in pixels.\n        \"\"\"\n\n        return self._width\n</code></pre> <p>             Bases: <code>BaseStorage</code></p> <p>File system storage which stores files in the local filesystem. You might want to use this with the <code>FileType</code> type.</p> Source code in <code>fastapi_storages/filesystem.py</code> <pre><code>class FileSystemStorage(BaseStorage):\n    \"\"\"\n    File system storage which stores files in the local filesystem.\n    You might want to use this with the `FileType` type.\n    \"\"\"\n\n    default_chunk_size = 64 * 1024\n\n    def __init__(self, path: str) -&gt; None:\n        self._path = Path(path)\n        self._path.mkdir(parents=True, exist_ok=True)\n\n    def get_name(self, name: str) -&gt; str:\n        \"\"\"\n        Get the normalized name of the file.\n        \"\"\"\n\n        return secure_filename(Path(name).name)\n\n    def get_path(self, name: str) -&gt; str:\n        \"\"\"\n        Get full path to the file.\n        \"\"\"\n\n        return str(self._path / Path(name))\n\n    def get_size(self, name: str) -&gt; int:\n        \"\"\"\n        Get file size in bytes.\n        \"\"\"\n\n        return (self._path / name).stat().st_size\n\n    def open(self, name: str) -&gt; BinaryIO:\n        \"\"\"\n        Open a file handle of the file object in binary mode.\n        \"\"\"\n\n        path = self._path / Path(name)\n        return open(path, \"rb\")\n\n    def write(self, file: BinaryIO, name: str) -&gt; str:\n        \"\"\"\n        Write input file which is opened in binary mode to destination.\n        \"\"\"\n\n        filename = secure_filename(name)\n        path = self._path / Path(filename)\n\n        file.seek(0, 0)\n        with open(path, \"wb\") as output:\n            while True:\n                chunk = file.read(self.default_chunk_size)\n                if not chunk:\n                    break\n                output.write(chunk)\n\n        return str(path)\n\n    def generate_new_filename(self, filename: str) -&gt; str:\n        counter = 0\n        path = self._path / filename\n        stem, extension = Path(filename).stem, Path(filename).suffix\n\n        while path.exists():\n            counter += 1\n            path = self._path / f\"{stem}_{counter}{extension}\"\n\n        return path.name\n</code></pre> <p>             Bases: <code>BaseStorage</code></p> <p>Amazon S3 or any S3 compatible storage backend. You might want to use this with the <code>FileType</code> type. Requires <code>boto3</code> to be installed.</p> Source code in <code>fastapi_storages/s3.py</code> <pre><code>class S3Storage(BaseStorage):\n    \"\"\"\n    Amazon S3 or any S3 compatible storage backend.\n    You might want to use this with the `FileType` type.\n    Requires `boto3` to be installed.\n    \"\"\"\n\n    default_content_type = \"application/octet-stream\"\n\n    AWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\", \"\")\n    \"\"\"AWS access key ID. Either set here or as an environment variable.\"\"\"\n\n    AWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\", \"\")\n    \"\"\"AWS secret access key. Either set here or as an environment variable.\"\"\"\n\n    AWS_S3_BUCKET_NAME = \"\"\n    \"\"\"AWS S3 bucket name to use.\"\"\"\n\n    AWS_S3_ENDPOINT_URL = \"\"\n    \"\"\"AWS S3 endpoint URL.\"\"\"\n\n    AWS_S3_USE_SSL = True\n    \"\"\"Indicate if SSL should be used.\"\"\"\n\n    AWS_DEFAULT_ACL = \"\"\n    \"\"\"Optional ACL set on the object like `public-read`.\n    By default file will be private.\"\"\"\n\n    AWS_QUERYSTRING_AUTH = False\n    \"\"\"Indicate if query parameter authentication should be used in URLs.\"\"\"\n\n    AWS_S3_CUSTOM_DOMAIN = \"\"\n    \"\"\"Custom domain to use for serving object URLs.\"\"\"\n\n    def __init__(self) -&gt; None:\n        assert boto3 is not None, \"'boto3' is not installed\"\n        assert not self.AWS_S3_ENDPOINT_URL.startswith(\n            \"http\"\n        ), \"URL should not contain protocol\"\n\n        self._http_scheme = \"https\" if self.AWS_S3_USE_SSL else \"http\"\n        self._url = f\"{self._http_scheme}://{self.AWS_S3_ENDPOINT_URL}\"\n        self._s3 = boto3.resource(\n            \"s3\",\n            endpoint_url=self._url,\n            use_ssl=self.AWS_S3_USE_SSL,\n            aws_access_key_id=self.AWS_ACCESS_KEY_ID,\n            aws_secret_access_key=self.AWS_SECRET_ACCESS_KEY,\n        )\n        self._bucket = self._s3.Bucket(name=self.AWS_S3_BUCKET_NAME)\n\n    def get_name(self, name: str) -&gt; str:\n        \"\"\"\n        Get the normalized name of the file.\n        \"\"\"\n\n        filename = secure_filename(Path(name).name)\n        return str(Path(name).with_name(filename))\n\n    def get_path(self, name: str) -&gt; str:\n        \"\"\"\n        Get full URL to the file.\n        \"\"\"\n\n        key = self.get_name(name)\n\n        if self.AWS_S3_CUSTOM_DOMAIN:\n            return \"{}://{}/{}\".format(\n                self._http_scheme,\n                self.AWS_S3_CUSTOM_DOMAIN,\n                key,\n            )\n\n        if self.AWS_QUERYSTRING_AUTH:\n            params = {\"Bucket\": self._bucket.name, \"Key\": key}\n            return self._s3.meta.client.generate_presigned_url(\n                \"get_object\", Params=params\n            )\n\n        return \"{}://{}/{}/{}\".format(\n            self._http_scheme,\n            self.AWS_S3_ENDPOINT_URL,\n            self.AWS_S3_BUCKET_NAME,\n            key,\n        )\n\n    def get_size(self, name: str) -&gt; int:\n        \"\"\"\n        Get file size in bytes.\n        \"\"\"\n\n        key = self.get_name(name)\n        return self._bucket.Object(key).content_length\n\n    def write(self, file: BinaryIO, name: str) -&gt; str:\n        \"\"\"\n        Write input file which is opened in binary mode to destination.\n        \"\"\"\n\n        file.seek(0, 0)\n        key = self.get_name(name)\n        content_type, _ = mimetypes.guess_type(key)\n        params = {\n            \"ACL\": self.AWS_DEFAULT_ACL,\n            \"ContentType\": content_type or self.default_content_type,\n        }\n        self._bucket.upload_fileobj(file, key, ExtraArgs=params)\n        return key\n\n    def generate_new_filename(self, filename: str) -&gt; str:\n        key = self.get_name(filename)\n        stem = Path(filename).stem\n        suffix = Path(filename).suffix\n        counter = 0\n\n        while self._check_object_exists(key):\n            counter += 1\n            filename = f\"{stem}_{counter}{suffix}\"\n            key = self.get_name(filename)\n\n        return filename\n\n    def _check_object_exists(self, key: str) -&gt; bool:\n        try:\n            self._bucket.Object(key).load()\n        except boto3.exceptions.botocore.exceptions.ClientError as e:\n            if e.response[\"Error\"][\"Code\"] == \"404\":\n                return False\n\n        return True\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.StorageFile.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>File name including extension.</p>"},{"location":"api_reference/storages/#fastapi_storages.StorageFile.path","title":"<code>path: str</code>  <code>property</code>","text":"<p>Complete file path.</p>"},{"location":"api_reference/storages/#fastapi_storages.StorageFile.size","title":"<code>size: int</code>  <code>property</code>","text":"<p>File size in bytes.</p>"},{"location":"api_reference/storages/#fastapi_storages.StorageFile.open","title":"<code>open()</code>","text":"<p>Open a file handle of the file.</p> Source code in <code>fastapi_storages/base.py</code> <pre><code>def open(self) -&gt; BinaryIO:\n    \"\"\"\n    Open a file handle of the file.\n    \"\"\"\n\n    return self._storage.open(self._name)\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.StorageFile.write","title":"<code>write(file)</code>","text":"<p>Write input file which is opened in binary mode to destination.</p> Source code in <code>fastapi_storages/base.py</code> <pre><code>def write(self, file: BinaryIO) -&gt; str:\n    \"\"\"\n    Write input file which is opened in binary mode to destination.\n    \"\"\"\n\n    if not self._storage.OVERWRITE_EXISTING_FILES:\n        self._name = self._storage.generate_new_filename(self._name)\n\n    return self._storage.write(file=file, name=self._name)\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.StorageImage.height","title":"<code>height: int</code>  <code>property</code>","text":"<p>Image height in pixels.</p>"},{"location":"api_reference/storages/#fastapi_storages.StorageImage.width","title":"<code>width: int</code>  <code>property</code>","text":"<p>Image width in pixels.</p>"},{"location":"api_reference/storages/#fastapi_storages.FileSystemStorage.get_name","title":"<code>get_name(name)</code>","text":"<p>Get the normalized name of the file.</p> Source code in <code>fastapi_storages/filesystem.py</code> <pre><code>def get_name(self, name: str) -&gt; str:\n    \"\"\"\n    Get the normalized name of the file.\n    \"\"\"\n\n    return secure_filename(Path(name).name)\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.FileSystemStorage.get_path","title":"<code>get_path(name)</code>","text":"<p>Get full path to the file.</p> Source code in <code>fastapi_storages/filesystem.py</code> <pre><code>def get_path(self, name: str) -&gt; str:\n    \"\"\"\n    Get full path to the file.\n    \"\"\"\n\n    return str(self._path / Path(name))\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.FileSystemStorage.get_size","title":"<code>get_size(name)</code>","text":"<p>Get file size in bytes.</p> Source code in <code>fastapi_storages/filesystem.py</code> <pre><code>def get_size(self, name: str) -&gt; int:\n    \"\"\"\n    Get file size in bytes.\n    \"\"\"\n\n    return (self._path / name).stat().st_size\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.FileSystemStorage.open","title":"<code>open(name)</code>","text":"<p>Open a file handle of the file object in binary mode.</p> Source code in <code>fastapi_storages/filesystem.py</code> <pre><code>def open(self, name: str) -&gt; BinaryIO:\n    \"\"\"\n    Open a file handle of the file object in binary mode.\n    \"\"\"\n\n    path = self._path / Path(name)\n    return open(path, \"rb\")\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.FileSystemStorage.write","title":"<code>write(file, name)</code>","text":"<p>Write input file which is opened in binary mode to destination.</p> Source code in <code>fastapi_storages/filesystem.py</code> <pre><code>def write(self, file: BinaryIO, name: str) -&gt; str:\n    \"\"\"\n    Write input file which is opened in binary mode to destination.\n    \"\"\"\n\n    filename = secure_filename(name)\n    path = self._path / Path(filename)\n\n    file.seek(0, 0)\n    with open(path, \"wb\") as output:\n        while True:\n            chunk = file.read(self.default_chunk_size)\n            if not chunk:\n                break\n            output.write(chunk)\n\n    return str(path)\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.AWS_ACCESS_KEY_ID","title":"<code>AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>AWS access key ID. Either set here or as an environment variable.</p>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.AWS_DEFAULT_ACL","title":"<code>AWS_DEFAULT_ACL = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional ACL set on the object like <code>public-read</code>. By default file will be private.</p>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.AWS_QUERYSTRING_AUTH","title":"<code>AWS_QUERYSTRING_AUTH = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Indicate if query parameter authentication should be used in URLs.</p>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.AWS_S3_BUCKET_NAME","title":"<code>AWS_S3_BUCKET_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>AWS S3 bucket name to use.</p>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.AWS_S3_CUSTOM_DOMAIN","title":"<code>AWS_S3_CUSTOM_DOMAIN = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Custom domain to use for serving object URLs.</p>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.AWS_S3_ENDPOINT_URL","title":"<code>AWS_S3_ENDPOINT_URL = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>AWS S3 endpoint URL.</p>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.AWS_S3_USE_SSL","title":"<code>AWS_S3_USE_SSL = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Indicate if SSL should be used.</p>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.AWS_SECRET_ACCESS_KEY","title":"<code>AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>AWS secret access key. Either set here or as an environment variable.</p>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.get_name","title":"<code>get_name(name)</code>","text":"<p>Get the normalized name of the file.</p> Source code in <code>fastapi_storages/s3.py</code> <pre><code>def get_name(self, name: str) -&gt; str:\n    \"\"\"\n    Get the normalized name of the file.\n    \"\"\"\n\n    filename = secure_filename(Path(name).name)\n    return str(Path(name).with_name(filename))\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.get_path","title":"<code>get_path(name)</code>","text":"<p>Get full URL to the file.</p> Source code in <code>fastapi_storages/s3.py</code> <pre><code>def get_path(self, name: str) -&gt; str:\n    \"\"\"\n    Get full URL to the file.\n    \"\"\"\n\n    key = self.get_name(name)\n\n    if self.AWS_S3_CUSTOM_DOMAIN:\n        return \"{}://{}/{}\".format(\n            self._http_scheme,\n            self.AWS_S3_CUSTOM_DOMAIN,\n            key,\n        )\n\n    if self.AWS_QUERYSTRING_AUTH:\n        params = {\"Bucket\": self._bucket.name, \"Key\": key}\n        return self._s3.meta.client.generate_presigned_url(\n            \"get_object\", Params=params\n        )\n\n    return \"{}://{}/{}/{}\".format(\n        self._http_scheme,\n        self.AWS_S3_ENDPOINT_URL,\n        self.AWS_S3_BUCKET_NAME,\n        key,\n    )\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.get_size","title":"<code>get_size(name)</code>","text":"<p>Get file size in bytes.</p> Source code in <code>fastapi_storages/s3.py</code> <pre><code>def get_size(self, name: str) -&gt; int:\n    \"\"\"\n    Get file size in bytes.\n    \"\"\"\n\n    key = self.get_name(name)\n    return self._bucket.Object(key).content_length\n</code></pre>"},{"location":"api_reference/storages/#fastapi_storages.S3Storage.write","title":"<code>write(file, name)</code>","text":"<p>Write input file which is opened in binary mode to destination.</p> Source code in <code>fastapi_storages/s3.py</code> <pre><code>def write(self, file: BinaryIO, name: str) -&gt; str:\n    \"\"\"\n    Write input file which is opened in binary mode to destination.\n    \"\"\"\n\n    file.seek(0, 0)\n    key = self.get_name(name)\n    content_type, _ = mimetypes.guess_type(key)\n    params = {\n        \"ACL\": self.AWS_DEFAULT_ACL,\n        \"ContentType\": content_type or self.default_content_type,\n    }\n    self._bucket.upload_fileobj(file, key, ExtraArgs=params)\n    return key\n</code></pre>"}]}